'''
from z3 import *

x = Int('x')
y = Int('y')


s = Solver()

e1 = 257
e2 = 65537

s.add(x*e1 + y*e2 == 1)
s.add(y < -1)


if s.check():
	print(s.model())

[x = 32641, y = -128]
'''
import sys
import binascii
sys.setrecursionlimit(1000000)
def egcd(a, b):
    if a == 0:
      return (b, 0, 1)
    else:
      g, y, x = egcd(b % a, a)
      return (g, x - (b // a) * y, y)
def modinv(a, m):
    g, x, y = egcd(a, m)
    if g != 1:
      raise Exception('modular inverse does not exist')
    else:
      return x % m

c1=90138539202997921062521008322270011680417897934998597691144576791170633040455226915227028346034135074832136716182459708177008237460078134255491152513699733683733211903331869958429681595065378549816307112369078546989009438632937612864430929728654680732687294044817646178431852056367797481030899688140409971056793028362045559472976852270558535059678970190102065709076236571516675097321591154605477447910582176493388515716337057109603091101071503645391742296727421723878919035620792524645091093804067302962982821690156463293663188082210131620218261634875575400077263466930075181487938277336680772084629269572615691612173517792472768585983274415954096116579806698847344750634339928076345285433429214648268956380914392399816198237231020912063445703290601575719272638758268015007579363730956947279559767180404121312688218903718402776563915540499338594933847762778285566002661660577152797694046131453776466283216977407669735685609077083235578213539648890270831601583218427430817362007711776654879331470038857857390402647249921228380479668876181179000107724667197422325927844514452513377835077241863427887587216391677937419407951673456714113844545527449938012737367014518298660759097171223810082187834377946278032593395566398466734623185009
n=102933171036494563250645700852165641539794571796243407195371219023405673452416872317170990079137711373319521122118043792960243880808943377909840363944333598935993596689475190794790167238260731353234938791441563142624825283591040229102201654553672254415540702749911372289002449406523899837075163908759494427022451073702799195864869601241190226348302153233764574984020236683330763763047728273069218928098012953049229316265262225864717792822984858158745383563456816944796948503260582157995959051370498496353976062262869716542533051224546874173711426972619728177965240922583029824938179603764520092048804078983164769254857049858762120721443499261814626598906506814299463868377412045291067587365574063598361746386798818465237153754004097481863113723767398142410942951981608237931449947541382010901191255501827115512259761700711848639792461859999646738051006007615203324017732256150259099031327409685762820660370555308652571161769368962830433763204880847918420697007929466585109941645492731434369180410199328888262546526932867335973944216054217652872149416665334008419045399199908402666361347330408061273765170396790091241054732447969155193947740048436933214484622365779024015614495583854593816178771787719975967810186493732244654663185989
e1=257
c2=23986184492868330690657727055718572353741948913093823489297807492504507384089899778160939409343253551862164746595564605047398182804279181158245426028456705662186177683461514059389933861186294842191345590258179571187792874983113811185412980821522811971010410280022041634901950419884013102334331373982150423385128461966321067512205045483567115613279778337003164444793620700721853991923746939926227387599372223574539500016723515921117072181548886158778256459325285632592145928944400014281442885610657364243771213439711830736407180585739606906311659673521605508809308555828209599840856195164782481925960245197009068180575638104270281150088010618019756092167919775093441678145319591459334270643876555035615993639897078416747709504079926729763448461430523313870095284165684374338578695686207924509753060473128098492087911275674010735684198667644781827127807590359961255093468740539806590022130094128018816865853475094406930858999599198818317118589037123680455467787639442824110151710549568203538969026600622834528773821968924803111860533319299635649598162108714335973667224607157683329611934567751409986816780417578685227064370941128060107273592234970760583477225103861985611854094207531804900866087692475757422872805867360365306858525447
e2=65537

s = egcd(e1, e2)
s1 = s[1]
s2 = s[2]

if s1<0:
   s1 = - s1
   c1 = modinv(c1, n)
elif s2<0:
   s2 = - s2
   c2 = modinv(c2, n)
m=(pow(c1,s1,n)*pow(c2,s2,n)) % n
print(m)
print (binascii.unhexlify(hex(m)[2:].strip("L")))